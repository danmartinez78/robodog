# ============================================================================
# ShadowHound Production Environment
# ============================================================================
#
# Configuration optimized for production deployment WITH real robot.
# Copy to .env for production use.
#
# ⚠️  SECURITY WARNING: This file contains sensitive information!
#     - Never commit this file to version control
#     - Restrict file permissions: chmod 600 .env
#     - Use secrets management in production (Vault, AWS Secrets, etc.)
#
# ============================================================================

# ----------------------------------------------------------------------------
# Core Configuration
# ----------------------------------------------------------------------------

# OpenAI API Key - REQUIRED
# Store in secure secrets manager, not in file!
OPENAI_API_KEY=sk-proj-your-production-api-key-here

# Environment
ENVIRONMENT=production

# ----------------------------------------------------------------------------
# Robot Configuration - REAL HARDWARE
# ----------------------------------------------------------------------------

# REAL robot (not mock!)
MOCK_ROBOT=false

# Robot IP Address - Update for your robot
# Ethernet: typically 192.168.1.103
# WiFi: typically 192.168.12.1
ROBOT_IP=192.168.1.103

# Connection interface
GO2_INTERFACE=ethernet

# ----------------------------------------------------------------------------
# ROS2 Configuration
# ----------------------------------------------------------------------------

# Production domain ID (different from development)
ROS_DOMAIN_ID=10

# Use CycloneDDS for better performance
RMW_IMPLEMENTATION=rmw_cyclonedds_cpp

# Production logging (less verbose)
RCUTILS_LOGGING_LEVEL=WARN

# ----------------------------------------------------------------------------
# Agent Configuration - PRODUCTION OPTIMIZED
# ----------------------------------------------------------------------------

# Use cloud backend (most reliable)
AGENT_BACKEND=cloud

# Enable planning agent for complex missions
USE_PLANNING_AGENT=true

# Use best model for production
OPENAI_MODEL=gpt-4o

# Use OpenAI embeddings (best quality)
USE_LOCAL_EMBEDDINGS=false

# Optimized RAG settings
RAG_QUERY_N=4
RAG_SIMILARITY_THRESHOLD=0.5

# Token limits
MAX_INPUT_TOKENS=128000
MAX_OUTPUT_TOKENS=16384

# ----------------------------------------------------------------------------
# Web Interface - DISABLED FOR SECURITY
# ----------------------------------------------------------------------------

# ⚠️  SECURITY: Disable web interface in production!
#     Web interface has NO authentication by default.
#     Only enable if behind VPN/firewall or with authentication added.
ENABLE_WEB_INTERFACE=false

# If you MUST enable web interface, use these settings:
# ENABLE_WEB_INTERFACE=true
# WEB_PORT=8080
# WEB_HOST=127.0.0.1  # Localhost only!
# WEB_AUTH_TOKEN=your-very-secure-random-token-here
# ALLOWED_ORIGINS=https://yourdomain.com

# ----------------------------------------------------------------------------
# Logging - PRODUCTION
# ----------------------------------------------------------------------------

# Production logging (errors and warnings only)
LOG_LEVEL=WARNING
DIMOS_DEBUG=false

# Log directory
AGENT_OUTPUT_DIR=/var/log/shadowhound

# ----------------------------------------------------------------------------
# Performance - PRODUCTION TUNING
# ----------------------------------------------------------------------------

# Skip frames when busy (better performance)
PROCESS_ALL_INPUTS=false

# Thread pool for production load
THREAD_POOL_SIZE=8

# ----------------------------------------------------------------------------
# Security - PRODUCTION
# ----------------------------------------------------------------------------

# Rate limiting (requests per minute)
API_RATE_LIMIT=60

# Authentication token (generate strong random token!)
# WEB_AUTH_TOKEN=use-secrets-manager-not-env-file

# CORS policy (whitelist only)
# ALLOWED_ORIGINS=https://control.yourdomain.com

# ----------------------------------------------------------------------------
# Monitoring and Reliability
# ----------------------------------------------------------------------------

# Ensure agent restarts on failure (set in systemd/docker)
# RESTART_POLICY=always

# Health check endpoint (for load balancers)
# HEALTH_CHECK_PORT=8081

# ----------------------------------------------------------------------------
# Production Checklist
# ----------------------------------------------------------------------------
#
# Before deploying to production:
#
# ✓ Security:
#   [ ] OPENAI_API_KEY stored in secrets manager (not .env file)
#   [ ] Web interface disabled OR behind authentication
#   [ ] File permissions restricted: chmod 600 .env
#   [ ] Firewall configured (block external access to ROS/web ports)
#   [ ] HTTPS/WSS enabled if web interface is used
#   [ ] Strong authentication tokens generated
#
# ✓ Robot:
#   [ ] ROBOT_IP verified and tested
#   [ ] SSL certificates generated and deployed
#   [ ] SSH keys configured for deployment
#   [ ] Docker registry credentials configured
#   [ ] Cloudflare tunnel configured (if used)
#   [ ] Backup system tested and verified
#
# ==============================================================================
# NETWORK VALIDATION CHECKLIST
# ==============================================================================
#
# Before deploying:
#   - Verify robot WiFi connection: iwconfig
#   - Ping robot: ping $ROBOT_IP
#   - Check network latency: ping $ROBOT_IP
#
# ✓ ROS2:
#   [ ] ROS_DOMAIN_ID set to production value (not dev)
#   [ ] All nodes on same domain
#   [ ] Network bandwidth sufficient
#   [ ] Latency acceptable (<100ms)
#
# ✓ Monitoring:
#   [ ] Logging configured and working
#   [ ] Log rotation enabled
#   [ ] Disk space monitored
#   [ ] CPU/memory monitoring
#   [ ] Alert system configured
#
# ✓ Reliability:
#   [ ] Auto-restart on failure (systemd/docker)
#   [ ] Backup communication channel
#   [ ] Low battery auto-return tested
#   [ ] Network failure handling tested
#   [ ] Mission timeout handling configured
#
# ✓ Cost Management:
#   [ ] OpenAI API rate limits set
#   [ ] Cost alerts configured
#   [ ] Budget limits in place
#   [ ] Model selection optimized for cost/performance
#
# ✓ Compliance:
#   [ ] Data retention policies implemented
#   [ ] Privacy regulations followed (GDPR, etc.)
#   [ ] Audit logging enabled
#   [ ] Incident response plan documented
#
# ✓ Testing:
#   [ ] Full system tested in production-like environment
#   [ ] Failover scenarios tested
#   [ ] Load testing completed
#   [ ] Emergency procedures tested
#   [ ] Rollback plan documented
#
# ----------------------------------------------------------------------------
# Production Deployment Commands
# ----------------------------------------------------------------------------
#
# 1. Secure the environment file:
#    chmod 600 .env
#    chown shadowhound:shadowhound .env
#
# 2. Test configuration:
#    ros2 launch shadowhound_mission_agent bringup.launch.py --dry-run
#
# 3. Start service:
#    sudo systemctl start shadowhound-agent
#
# 4. Monitor logs:
#    journalctl -u shadowhound-agent -f
#
# 5. Check health:
#    ros2 node info /shadowhound_mission_agent
#    ros2 topic echo /mission_status
#
# ----------------------------------------------------------------------------
# Troubleshooting
# ----------------------------------------------------------------------------
#
# If agent doesn't start:
#   - Check OPENAI_API_KEY is valid: echo $OPENAI_API_KEY
#   - Check ROS2 domain: echo $ROS_DOMAIN_ID
#   - Check logs: journalctl -u shadowhound-agent -n 100
#
# If can't connect to robot:
#   - Ping robot: ping $ROBOT_IP
#   - Check network: ifconfig
#   - Verify robot is powered on and connected
#   - Check firewall rules: sudo iptables -L
#
# If high API costs:
#   - Review model selection (use gpt-3.5-turbo for simple tasks)
#   - Check rate limiting is working
#   - Monitor usage: https://platform.openai.com/usage
#   - Consider caching responses
#
# If performance issues:
#   - Check CPU/memory: top
#   - Check network latency: ping $ROBOT_IP
#   - Review THREAD_POOL_SIZE
#   - Check PROCESS_ALL_INPUTS setting
#   - Monitor ROS2 topic hz: ros2 topic hz /mission_command
#
# ============================================================================
